//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace SongProofWP8
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace SongProofWP8.SongProofWP8_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[34];
            _typeNameTable[0] = "Windows.UI.Text.FontWeight";
            _typeNameTable[1] = "System.ValueType";
            _typeNameTable[2] = "Object";
            _typeNameTable[3] = "SongProofWP8.Pages.HW3SetupPage";
            _typeNameTable[4] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[5] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[6] = "SongProofWP8.Pages.MainPage";
            _typeNameTable[7] = "SongProofWP8.Pages.ScaleProofTestListPage";
            _typeNameTable[8] = "SongProofWP8.Pages.SessionPage";
            _typeNameTable[9] = "SongProofWP8.Session";
            _typeNameTable[10] = "String";
            _typeNameTable[11] = "Int32";
            _typeNameTable[12] = "SongProofWP8.Pages.SessionSetupPage";
            _typeNameTable[13] = "SongProofWP8.UserControls.HW3ButtonsControl";
            _typeNameTable[14] = "SongProofWP8.UserControls.HW3IntervalHolderControl";
            _typeNameTable[15] = "SongProofWP8.UserControls.HW3ProgressTrackerControl";
            _typeNameTable[16] = "String[]";
            _typeNameTable[17] = "System.Array";
            _typeNameTable[18] = "Double";
            _typeNameTable[19] = "Boolean";
            _typeNameTable[20] = "SongProofWP8.UserControls.ListResultsControl";
            _typeNameTable[21] = "SongProofWP8.UserControls.PianoKeyControl";
            _typeNameTable[22] = "SongProofWP8.UserControls.ProgressTrackerControl";
            _typeNameTable[23] = "SongProofWP8.UserControls.SessionButtonsControl";
            _typeNameTable[24] = "SongProofWP8.Pages.SessionResultsPage";
            _typeNameTable[25] = "SongProofWP8.Pages.PlacingTheNoteSetupPage";
            _typeNameTable[26] = "SongProofWP8.Common.NavigationHelper";
            _typeNameTable[27] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[28] = "SongProofWP8.Common.ObservableDictionary";
            _typeNameTable[29] = "SongProofWP8.Pages.ViewScale";
            _typeNameTable[30] = "SongProofWP8.UserControls.SessionSetupControl";
            _typeNameTable[31] = "SongProofWP8.ScaleResources.Difficulties";
            _typeNameTable[32] = "System.Enum";
            _typeNameTable[33] = "SongProofWP8.UserControls.TitleBarControl";

            _typeTable = new global::System.Type[34];
            _typeTable[0] = typeof(global::Windows.UI.Text.FontWeight);
            _typeTable[1] = typeof(global::System.ValueType);
            _typeTable[2] = typeof(global::System.Object);
            _typeTable[3] = typeof(global::SongProofWP8.Pages.HW3SetupPage);
            _typeTable[4] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[5] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[6] = typeof(global::SongProofWP8.Pages.MainPage);
            _typeTable[7] = typeof(global::SongProofWP8.Pages.ScaleProofTestListPage);
            _typeTable[8] = typeof(global::SongProofWP8.Pages.SessionPage);
            _typeTable[9] = typeof(global::SongProofWP8.Session);
            _typeTable[10] = typeof(global::System.String);
            _typeTable[11] = typeof(global::System.Int32);
            _typeTable[12] = typeof(global::SongProofWP8.Pages.SessionSetupPage);
            _typeTable[13] = typeof(global::SongProofWP8.UserControls.HW3ButtonsControl);
            _typeTable[14] = typeof(global::SongProofWP8.UserControls.HW3IntervalHolderControl);
            _typeTable[15] = typeof(global::SongProofWP8.UserControls.HW3ProgressTrackerControl);
            _typeTable[16] = typeof(global::System.String[]);
            _typeTable[17] = typeof(global::System.Array);
            _typeTable[18] = typeof(global::System.Double);
            _typeTable[19] = typeof(global::System.Boolean);
            _typeTable[20] = typeof(global::SongProofWP8.UserControls.ListResultsControl);
            _typeTable[21] = typeof(global::SongProofWP8.UserControls.PianoKeyControl);
            _typeTable[22] = typeof(global::SongProofWP8.UserControls.ProgressTrackerControl);
            _typeTable[23] = typeof(global::SongProofWP8.UserControls.SessionButtonsControl);
            _typeTable[24] = typeof(global::SongProofWP8.Pages.SessionResultsPage);
            _typeTable[25] = typeof(global::SongProofWP8.Pages.PlacingTheNoteSetupPage);
            _typeTable[26] = typeof(global::SongProofWP8.Common.NavigationHelper);
            _typeTable[27] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[28] = typeof(global::SongProofWP8.Common.ObservableDictionary);
            _typeTable[29] = typeof(global::SongProofWP8.Pages.ViewScale);
            _typeTable[30] = typeof(global::SongProofWP8.UserControls.SessionSetupControl);
            _typeTable[31] = typeof(global::SongProofWP8.ScaleResources.Difficulties);
            _typeTable[32] = typeof(global::System.Enum);
            _typeTable[33] = typeof(global::SongProofWP8.UserControls.TitleBarControl);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_3_HW3SetupPage() { return new global::SongProofWP8.Pages.HW3SetupPage(); }
        private object Activate_6_MainPage() { return new global::SongProofWP8.Pages.MainPage(); }
        private object Activate_7_ScaleProofTestListPage() { return new global::SongProofWP8.Pages.ScaleProofTestListPage(); }
        private object Activate_8_SessionPage() { return new global::SongProofWP8.Pages.SessionPage(); }
        private object Activate_12_SessionSetupPage() { return new global::SongProofWP8.Pages.SessionSetupPage(); }
        private object Activate_24_SessionResultsPage() { return new global::SongProofWP8.Pages.SessionResultsPage(); }
        private object Activate_25_PlacingTheNoteSetupPage() { return new global::SongProofWP8.Pages.PlacingTheNoteSetupPage(); }
        private object Activate_28_ObservableDictionary() { return new global::SongProofWP8.Common.ObservableDictionary(); }
        private object Activate_29_ViewScale() { return new global::SongProofWP8.Pages.ViewScale(); }
        private void MapAdd_28_ObservableDictionary(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.Object>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Windows.UI.Text.FontWeight
                userType = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 1:   //  System.ValueType
                userType = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 2:   //  Object
                xamlType = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  SongProofWP8.Pages.HW3SetupPage
                userType = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_3_HW3SetupPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 4:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  SongProofWP8.Pages.MainPage
                userType = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_6_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  SongProofWP8.Pages.ScaleProofTestListPage
                userType = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_7_ScaleProofTestListPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 8:   //  SongProofWP8.Pages.SessionPage
                userType = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_8_SessionPage;
                userType.AddMemberName("curSession");
                userType.AddMemberName("ScaleName");
                userType.AddMemberName("NoteNumber");
                userType.AddMemberName("NoteIndex");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 9:   //  SongProofWP8.Session
                userType = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 10:   //  String
                xamlType = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 11:   //  Int32
                xamlType = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 12:   //  SongProofWP8.Pages.SessionSetupPage
                userType = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_12_SessionSetupPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 13:   //  SongProofWP8.UserControls.HW3ButtonsControl
                userType = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 14:   //  SongProofWP8.UserControls.HW3IntervalHolderControl
                userType = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 15:   //  SongProofWP8.UserControls.HW3ProgressTrackerControl
                userType = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.AddMemberName("Notes");
                userType.AddMemberName("Note1Var");
                userType.AddMemberName("Note2Var");
                userType.AddMemberName("Note3Var");
                userType.AddMemberName("TimerText");
                userType.AddMemberName("MaxValue");
                userType.AddMemberName("PBValue");
                userType.AddMemberName("TranslationX");
                userType.AddMemberName("RemainingTime");
                userType.AddMemberName("CountingDown");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  String[]
                userType = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Array"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 17:   //  System.Array
                userType = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 18:   //  Double
                xamlType = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  Boolean
                xamlType = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 20:   //  SongProofWP8.UserControls.ListResultsControl
                userType = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  SongProofWP8.UserControls.PianoKeyControl
                userType = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 22:   //  SongProofWP8.UserControls.ProgressTrackerControl
                userType = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.AddMemberName("MinValue");
                userType.AddMemberName("MaxValue");
                userType.AddMemberName("TestingLabel");
                userType.AddMemberName("TestingValue");
                userType.AddMemberName("PBValue");
                userType.AddMemberName("RemainingTime");
                userType.AddMemberName("CountingDown");
                userType.AddMemberName("TrackingTime");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 23:   //  SongProofWP8.UserControls.SessionButtonsControl
                userType = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  SongProofWP8.Pages.SessionResultsPage
                userType = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_24_SessionResultsPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  SongProofWP8.Pages.PlacingTheNoteSetupPage
                userType = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_25_PlacingTheNoteSetupPage;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 26:   //  SongProofWP8.Common.NavigationHelper
                userType = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 27:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 28:   //  SongProofWP8.Common.ObservableDictionary
                userType = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.DictionaryAdd = MapAdd_28_ObservableDictionary;
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 29:   //  SongProofWP8.Pages.ViewScale
                userType = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_29_ViewScale;
                userType.AddMemberName("NavigationHelper");
                userType.AddMemberName("DefaultViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 30:   //  SongProofWP8.UserControls.SessionSetupControl
                userType = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.AddMemberName("NoteAmount");
                userType.AddMemberName("SelectedScaleGroup");
                userType.AddMemberName("SelectedScale");
                userType.AddMemberName("SelectedKey");
                userType.AddMemberName("SelectedDifficulty");
                userType.AddMemberName("ShowSharp");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  SongProofWP8.ScaleResources.Difficulties
                userType = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Zen", global::SongProofWP8.ScaleResources.Difficulties.Zen);
                userType.AddEnumValue("Hard", global::SongProofWP8.ScaleResources.Difficulties.Hard);
                userType.AddEnumValue("Medium", global::SongProofWP8.ScaleResources.Difficulties.Medium);
                userType.AddEnumValue("Easy", global::SongProofWP8.ScaleResources.Difficulties.Easy);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 32:   //  System.Enum
                userType = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 33:   //  SongProofWP8.UserControls.TitleBarControl
                userType = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.AddMemberName("TextValue");
                userType.AddMemberName("FontSizeValue");
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_SessionPage_curSession(object instance)
        {
            var that = (global::SongProofWP8.Pages.SessionPage)instance;
            return that.curSession;
        }
        private object get_1_SessionPage_ScaleName(object instance)
        {
            var that = (global::SongProofWP8.Pages.SessionPage)instance;
            return that.ScaleName;
        }
        private void set_1_SessionPage_ScaleName(object instance, object Value)
        {
            var that = (global::SongProofWP8.Pages.SessionPage)instance;
            that.ScaleName = (global::System.String)Value;
        }
        private object get_2_SessionPage_NoteNumber(object instance)
        {
            var that = (global::SongProofWP8.Pages.SessionPage)instance;
            return that.NoteNumber;
        }
        private void set_2_SessionPage_NoteNumber(object instance, object Value)
        {
            var that = (global::SongProofWP8.Pages.SessionPage)instance;
            that.NoteNumber = (global::System.Int32)Value;
        }
        private object get_3_SessionPage_NoteIndex(object instance)
        {
            var that = (global::SongProofWP8.Pages.SessionPage)instance;
            return that.NoteIndex;
        }
        private object get_4_HW3ProgressTrackerControl_Notes(object instance)
        {
            var that = (global::SongProofWP8.UserControls.HW3ProgressTrackerControl)instance;
            return that.Notes;
        }
        private void set_4_HW3ProgressTrackerControl_Notes(object instance, object Value)
        {
            var that = (global::SongProofWP8.UserControls.HW3ProgressTrackerControl)instance;
            that.Notes = (global::System.String[])Value;
        }
        private object get_5_HW3ProgressTrackerControl_Note1Var(object instance)
        {
            var that = (global::SongProofWP8.UserControls.HW3ProgressTrackerControl)instance;
            return that.Note1Var;
        }
        private void set_5_HW3ProgressTrackerControl_Note1Var(object instance, object Value)
        {
            var that = (global::SongProofWP8.UserControls.HW3ProgressTrackerControl)instance;
            that.Note1Var = (global::System.String)Value;
        }
        private object get_6_HW3ProgressTrackerControl_Note2Var(object instance)
        {
            var that = (global::SongProofWP8.UserControls.HW3ProgressTrackerControl)instance;
            return that.Note2Var;
        }
        private void set_6_HW3ProgressTrackerControl_Note2Var(object instance, object Value)
        {
            var that = (global::SongProofWP8.UserControls.HW3ProgressTrackerControl)instance;
            that.Note2Var = (global::System.String)Value;
        }
        private object get_7_HW3ProgressTrackerControl_Note3Var(object instance)
        {
            var that = (global::SongProofWP8.UserControls.HW3ProgressTrackerControl)instance;
            return that.Note3Var;
        }
        private void set_7_HW3ProgressTrackerControl_Note3Var(object instance, object Value)
        {
            var that = (global::SongProofWP8.UserControls.HW3ProgressTrackerControl)instance;
            that.Note3Var = (global::System.String)Value;
        }
        private object get_8_HW3ProgressTrackerControl_TimerText(object instance)
        {
            var that = (global::SongProofWP8.UserControls.HW3ProgressTrackerControl)instance;
            return that.TimerText;
        }
        private void set_8_HW3ProgressTrackerControl_TimerText(object instance, object Value)
        {
            var that = (global::SongProofWP8.UserControls.HW3ProgressTrackerControl)instance;
            that.TimerText = (global::System.String)Value;
        }
        private object get_9_HW3ProgressTrackerControl_MaxValue(object instance)
        {
            var that = (global::SongProofWP8.UserControls.HW3ProgressTrackerControl)instance;
            return that.MaxValue;
        }
        private object get_10_HW3ProgressTrackerControl_PBValue(object instance)
        {
            var that = (global::SongProofWP8.UserControls.HW3ProgressTrackerControl)instance;
            return that.PBValue;
        }
        private object get_11_HW3ProgressTrackerControl_TranslationX(object instance)
        {
            var that = (global::SongProofWP8.UserControls.HW3ProgressTrackerControl)instance;
            return that.TranslationX;
        }
        private void set_11_HW3ProgressTrackerControl_TranslationX(object instance, object Value)
        {
            var that = (global::SongProofWP8.UserControls.HW3ProgressTrackerControl)instance;
            that.TranslationX = (global::System.Double)Value;
        }
        private object get_12_HW3ProgressTrackerControl_RemainingTime(object instance)
        {
            var that = (global::SongProofWP8.UserControls.HW3ProgressTrackerControl)instance;
            return that.RemainingTime;
        }
        private void set_12_HW3ProgressTrackerControl_RemainingTime(object instance, object Value)
        {
            var that = (global::SongProofWP8.UserControls.HW3ProgressTrackerControl)instance;
            that.RemainingTime = (global::System.Int32)Value;
        }
        private object get_13_HW3ProgressTrackerControl_CountingDown(object instance)
        {
            var that = (global::SongProofWP8.UserControls.HW3ProgressTrackerControl)instance;
            return that.CountingDown;
        }
        private void set_13_HW3ProgressTrackerControl_CountingDown(object instance, object Value)
        {
            var that = (global::SongProofWP8.UserControls.HW3ProgressTrackerControl)instance;
            that.CountingDown = (global::System.Boolean)Value;
        }
        private object get_14_ProgressTrackerControl_MinValue(object instance)
        {
            var that = (global::SongProofWP8.UserControls.ProgressTrackerControl)instance;
            return that.MinValue;
        }
        private void set_14_ProgressTrackerControl_MinValue(object instance, object Value)
        {
            var that = (global::SongProofWP8.UserControls.ProgressTrackerControl)instance;
            that.MinValue = (global::System.Int32)Value;
        }
        private object get_15_ProgressTrackerControl_MaxValue(object instance)
        {
            var that = (global::SongProofWP8.UserControls.ProgressTrackerControl)instance;
            return that.MaxValue;
        }
        private void set_15_ProgressTrackerControl_MaxValue(object instance, object Value)
        {
            var that = (global::SongProofWP8.UserControls.ProgressTrackerControl)instance;
            that.MaxValue = (global::System.Int32)Value;
        }
        private object get_16_ProgressTrackerControl_TestingLabel(object instance)
        {
            var that = (global::SongProofWP8.UserControls.ProgressTrackerControl)instance;
            return that.TestingLabel;
        }
        private void set_16_ProgressTrackerControl_TestingLabel(object instance, object Value)
        {
            var that = (global::SongProofWP8.UserControls.ProgressTrackerControl)instance;
            that.TestingLabel = (global::System.String)Value;
        }
        private object get_17_ProgressTrackerControl_TestingValue(object instance)
        {
            var that = (global::SongProofWP8.UserControls.ProgressTrackerControl)instance;
            return that.TestingValue;
        }
        private void set_17_ProgressTrackerControl_TestingValue(object instance, object Value)
        {
            var that = (global::SongProofWP8.UserControls.ProgressTrackerControl)instance;
            that.TestingValue = (global::System.String)Value;
        }
        private object get_18_ProgressTrackerControl_PBValue(object instance)
        {
            var that = (global::SongProofWP8.UserControls.ProgressTrackerControl)instance;
            return that.PBValue;
        }
        private void set_18_ProgressTrackerControl_PBValue(object instance, object Value)
        {
            var that = (global::SongProofWP8.UserControls.ProgressTrackerControl)instance;
            that.PBValue = (global::System.Double)Value;
        }
        private object get_19_ProgressTrackerControl_RemainingTime(object instance)
        {
            var that = (global::SongProofWP8.UserControls.ProgressTrackerControl)instance;
            return that.RemainingTime;
        }
        private object get_20_ProgressTrackerControl_CountingDown(object instance)
        {
            var that = (global::SongProofWP8.UserControls.ProgressTrackerControl)instance;
            return that.CountingDown;
        }
        private void set_20_ProgressTrackerControl_CountingDown(object instance, object Value)
        {
            var that = (global::SongProofWP8.UserControls.ProgressTrackerControl)instance;
            that.CountingDown = (global::System.Boolean)Value;
        }
        private object get_21_ProgressTrackerControl_TrackingTime(object instance)
        {
            var that = (global::SongProofWP8.UserControls.ProgressTrackerControl)instance;
            return that.TrackingTime;
        }
        private void set_21_ProgressTrackerControl_TrackingTime(object instance, object Value)
        {
            var that = (global::SongProofWP8.UserControls.ProgressTrackerControl)instance;
            that.TrackingTime = (global::System.Boolean)Value;
        }
        private object get_22_PlacingTheNoteSetupPage_NavigationHelper(object instance)
        {
            var that = (global::SongProofWP8.Pages.PlacingTheNoteSetupPage)instance;
            return that.NavigationHelper;
        }
        private object get_23_PlacingTheNoteSetupPage_DefaultViewModel(object instance)
        {
            var that = (global::SongProofWP8.Pages.PlacingTheNoteSetupPage)instance;
            return that.DefaultViewModel;
        }
        private object get_24_ViewScale_NavigationHelper(object instance)
        {
            var that = (global::SongProofWP8.Pages.ViewScale)instance;
            return that.NavigationHelper;
        }
        private object get_25_ViewScale_DefaultViewModel(object instance)
        {
            var that = (global::SongProofWP8.Pages.ViewScale)instance;
            return that.DefaultViewModel;
        }
        private object get_26_SessionSetupControl_NoteAmount(object instance)
        {
            var that = (global::SongProofWP8.UserControls.SessionSetupControl)instance;
            return that.NoteAmount;
        }
        private void set_26_SessionSetupControl_NoteAmount(object instance, object Value)
        {
            var that = (global::SongProofWP8.UserControls.SessionSetupControl)instance;
            that.NoteAmount = (global::System.Int32)Value;
        }
        private object get_27_SessionSetupControl_SelectedScaleGroup(object instance)
        {
            var that = (global::SongProofWP8.UserControls.SessionSetupControl)instance;
            return that.SelectedScaleGroup;
        }
        private void set_27_SessionSetupControl_SelectedScaleGroup(object instance, object Value)
        {
            var that = (global::SongProofWP8.UserControls.SessionSetupControl)instance;
            that.SelectedScaleGroup = (global::System.String)Value;
        }
        private object get_28_SessionSetupControl_SelectedScale(object instance)
        {
            var that = (global::SongProofWP8.UserControls.SessionSetupControl)instance;
            return that.SelectedScale;
        }
        private void set_28_SessionSetupControl_SelectedScale(object instance, object Value)
        {
            var that = (global::SongProofWP8.UserControls.SessionSetupControl)instance;
            that.SelectedScale = (global::System.Object)Value;
        }
        private object get_29_SessionSetupControl_SelectedKey(object instance)
        {
            var that = (global::SongProofWP8.UserControls.SessionSetupControl)instance;
            return that.SelectedKey;
        }
        private void set_29_SessionSetupControl_SelectedKey(object instance, object Value)
        {
            var that = (global::SongProofWP8.UserControls.SessionSetupControl)instance;
            that.SelectedKey = (global::System.String)Value;
        }
        private object get_30_SessionSetupControl_SelectedDifficulty(object instance)
        {
            var that = (global::SongProofWP8.UserControls.SessionSetupControl)instance;
            return that.SelectedDifficulty;
        }
        private void set_30_SessionSetupControl_SelectedDifficulty(object instance, object Value)
        {
            var that = (global::SongProofWP8.UserControls.SessionSetupControl)instance;
            that.SelectedDifficulty = (global::SongProofWP8.ScaleResources.Difficulties)Value;
        }
        private object get_31_SessionSetupControl_ShowSharp(object instance)
        {
            var that = (global::SongProofWP8.UserControls.SessionSetupControl)instance;
            return that.ShowSharp;
        }
        private void set_31_SessionSetupControl_ShowSharp(object instance, object Value)
        {
            var that = (global::SongProofWP8.UserControls.SessionSetupControl)instance;
            that.ShowSharp = (global::System.Boolean)Value;
        }
        private object get_32_TitleBarControl_TextValue(object instance)
        {
            var that = (global::SongProofWP8.UserControls.TitleBarControl)instance;
            return that.TextValue;
        }
        private void set_32_TitleBarControl_TextValue(object instance, object Value)
        {
            var that = (global::SongProofWP8.UserControls.TitleBarControl)instance;
            that.TextValue = (global::System.String)Value;
        }
        private object get_33_TitleBarControl_FontSizeValue(object instance)
        {
            var that = (global::SongProofWP8.UserControls.TitleBarControl)instance;
            return that.FontSizeValue;
        }
        private void set_33_TitleBarControl_FontSizeValue(object instance, object Value)
        {
            var that = (global::SongProofWP8.UserControls.TitleBarControl)instance;
            that.FontSizeValue = (global::System.Double)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember xamlMember = null;
            global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "SongProofWP8.Pages.SessionPage.curSession":
                userType = (global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SongProofWP8.Pages.SessionPage");
                xamlMember = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember(this, "curSession", "SongProofWP8.Session");
                xamlMember.Getter = get_0_SessionPage_curSession;
                xamlMember.SetIsReadOnly();
                break;
            case "SongProofWP8.Pages.SessionPage.ScaleName":
                userType = (global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SongProofWP8.Pages.SessionPage");
                xamlMember = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember(this, "ScaleName", "String");
                xamlMember.Getter = get_1_SessionPage_ScaleName;
                xamlMember.Setter = set_1_SessionPage_ScaleName;
                break;
            case "SongProofWP8.Pages.SessionPage.NoteNumber":
                userType = (global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SongProofWP8.Pages.SessionPage");
                xamlMember = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember(this, "NoteNumber", "Int32");
                xamlMember.Getter = get_2_SessionPage_NoteNumber;
                xamlMember.Setter = set_2_SessionPage_NoteNumber;
                break;
            case "SongProofWP8.Pages.SessionPage.NoteIndex":
                userType = (global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SongProofWP8.Pages.SessionPage");
                xamlMember = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember(this, "NoteIndex", "Int32");
                xamlMember.Getter = get_3_SessionPage_NoteIndex;
                xamlMember.SetIsReadOnly();
                break;
            case "SongProofWP8.UserControls.HW3ProgressTrackerControl.Notes":
                userType = (global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SongProofWP8.UserControls.HW3ProgressTrackerControl");
                xamlMember = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember(this, "Notes", "String[]");
                xamlMember.Getter = get_4_HW3ProgressTrackerControl_Notes;
                xamlMember.Setter = set_4_HW3ProgressTrackerControl_Notes;
                break;
            case "SongProofWP8.UserControls.HW3ProgressTrackerControl.Note1Var":
                userType = (global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SongProofWP8.UserControls.HW3ProgressTrackerControl");
                xamlMember = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember(this, "Note1Var", "String");
                xamlMember.Getter = get_5_HW3ProgressTrackerControl_Note1Var;
                xamlMember.Setter = set_5_HW3ProgressTrackerControl_Note1Var;
                break;
            case "SongProofWP8.UserControls.HW3ProgressTrackerControl.Note2Var":
                userType = (global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SongProofWP8.UserControls.HW3ProgressTrackerControl");
                xamlMember = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember(this, "Note2Var", "String");
                xamlMember.Getter = get_6_HW3ProgressTrackerControl_Note2Var;
                xamlMember.Setter = set_6_HW3ProgressTrackerControl_Note2Var;
                break;
            case "SongProofWP8.UserControls.HW3ProgressTrackerControl.Note3Var":
                userType = (global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SongProofWP8.UserControls.HW3ProgressTrackerControl");
                xamlMember = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember(this, "Note3Var", "String");
                xamlMember.Getter = get_7_HW3ProgressTrackerControl_Note3Var;
                xamlMember.Setter = set_7_HW3ProgressTrackerControl_Note3Var;
                break;
            case "SongProofWP8.UserControls.HW3ProgressTrackerControl.TimerText":
                userType = (global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SongProofWP8.UserControls.HW3ProgressTrackerControl");
                xamlMember = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember(this, "TimerText", "String");
                xamlMember.Getter = get_8_HW3ProgressTrackerControl_TimerText;
                xamlMember.Setter = set_8_HW3ProgressTrackerControl_TimerText;
                break;
            case "SongProofWP8.UserControls.HW3ProgressTrackerControl.MaxValue":
                userType = (global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SongProofWP8.UserControls.HW3ProgressTrackerControl");
                xamlMember = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember(this, "MaxValue", "Int32");
                xamlMember.Getter = get_9_HW3ProgressTrackerControl_MaxValue;
                xamlMember.SetIsReadOnly();
                break;
            case "SongProofWP8.UserControls.HW3ProgressTrackerControl.PBValue":
                userType = (global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SongProofWP8.UserControls.HW3ProgressTrackerControl");
                xamlMember = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember(this, "PBValue", "Int32");
                xamlMember.Getter = get_10_HW3ProgressTrackerControl_PBValue;
                xamlMember.SetIsReadOnly();
                break;
            case "SongProofWP8.UserControls.HW3ProgressTrackerControl.TranslationX":
                userType = (global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SongProofWP8.UserControls.HW3ProgressTrackerControl");
                xamlMember = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember(this, "TranslationX", "Double");
                xamlMember.Getter = get_11_HW3ProgressTrackerControl_TranslationX;
                xamlMember.Setter = set_11_HW3ProgressTrackerControl_TranslationX;
                break;
            case "SongProofWP8.UserControls.HW3ProgressTrackerControl.RemainingTime":
                userType = (global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SongProofWP8.UserControls.HW3ProgressTrackerControl");
                xamlMember = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember(this, "RemainingTime", "Int32");
                xamlMember.Getter = get_12_HW3ProgressTrackerControl_RemainingTime;
                xamlMember.Setter = set_12_HW3ProgressTrackerControl_RemainingTime;
                break;
            case "SongProofWP8.UserControls.HW3ProgressTrackerControl.CountingDown":
                userType = (global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SongProofWP8.UserControls.HW3ProgressTrackerControl");
                xamlMember = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember(this, "CountingDown", "Boolean");
                xamlMember.Getter = get_13_HW3ProgressTrackerControl_CountingDown;
                xamlMember.Setter = set_13_HW3ProgressTrackerControl_CountingDown;
                break;
            case "SongProofWP8.UserControls.ProgressTrackerControl.MinValue":
                userType = (global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SongProofWP8.UserControls.ProgressTrackerControl");
                xamlMember = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember(this, "MinValue", "Int32");
                xamlMember.Getter = get_14_ProgressTrackerControl_MinValue;
                xamlMember.Setter = set_14_ProgressTrackerControl_MinValue;
                break;
            case "SongProofWP8.UserControls.ProgressTrackerControl.MaxValue":
                userType = (global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SongProofWP8.UserControls.ProgressTrackerControl");
                xamlMember = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember(this, "MaxValue", "Int32");
                xamlMember.Getter = get_15_ProgressTrackerControl_MaxValue;
                xamlMember.Setter = set_15_ProgressTrackerControl_MaxValue;
                break;
            case "SongProofWP8.UserControls.ProgressTrackerControl.TestingLabel":
                userType = (global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SongProofWP8.UserControls.ProgressTrackerControl");
                xamlMember = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember(this, "TestingLabel", "String");
                xamlMember.Getter = get_16_ProgressTrackerControl_TestingLabel;
                xamlMember.Setter = set_16_ProgressTrackerControl_TestingLabel;
                break;
            case "SongProofWP8.UserControls.ProgressTrackerControl.TestingValue":
                userType = (global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SongProofWP8.UserControls.ProgressTrackerControl");
                xamlMember = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember(this, "TestingValue", "String");
                xamlMember.Getter = get_17_ProgressTrackerControl_TestingValue;
                xamlMember.Setter = set_17_ProgressTrackerControl_TestingValue;
                break;
            case "SongProofWP8.UserControls.ProgressTrackerControl.PBValue":
                userType = (global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SongProofWP8.UserControls.ProgressTrackerControl");
                xamlMember = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember(this, "PBValue", "Double");
                xamlMember.Getter = get_18_ProgressTrackerControl_PBValue;
                xamlMember.Setter = set_18_ProgressTrackerControl_PBValue;
                break;
            case "SongProofWP8.UserControls.ProgressTrackerControl.RemainingTime":
                userType = (global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SongProofWP8.UserControls.ProgressTrackerControl");
                xamlMember = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember(this, "RemainingTime", "Int32");
                xamlMember.Getter = get_19_ProgressTrackerControl_RemainingTime;
                xamlMember.SetIsReadOnly();
                break;
            case "SongProofWP8.UserControls.ProgressTrackerControl.CountingDown":
                userType = (global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SongProofWP8.UserControls.ProgressTrackerControl");
                xamlMember = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember(this, "CountingDown", "Boolean");
                xamlMember.Getter = get_20_ProgressTrackerControl_CountingDown;
                xamlMember.Setter = set_20_ProgressTrackerControl_CountingDown;
                break;
            case "SongProofWP8.UserControls.ProgressTrackerControl.TrackingTime":
                userType = (global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SongProofWP8.UserControls.ProgressTrackerControl");
                xamlMember = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember(this, "TrackingTime", "Boolean");
                xamlMember.Getter = get_21_ProgressTrackerControl_TrackingTime;
                xamlMember.Setter = set_21_ProgressTrackerControl_TrackingTime;
                break;
            case "SongProofWP8.Pages.PlacingTheNoteSetupPage.NavigationHelper":
                userType = (global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SongProofWP8.Pages.PlacingTheNoteSetupPage");
                xamlMember = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember(this, "NavigationHelper", "SongProofWP8.Common.NavigationHelper");
                xamlMember.Getter = get_22_PlacingTheNoteSetupPage_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "SongProofWP8.Pages.PlacingTheNoteSetupPage.DefaultViewModel":
                userType = (global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SongProofWP8.Pages.PlacingTheNoteSetupPage");
                xamlMember = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "SongProofWP8.Common.ObservableDictionary");
                xamlMember.Getter = get_23_PlacingTheNoteSetupPage_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "SongProofWP8.Pages.ViewScale.NavigationHelper":
                userType = (global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SongProofWP8.Pages.ViewScale");
                xamlMember = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember(this, "NavigationHelper", "SongProofWP8.Common.NavigationHelper");
                xamlMember.Getter = get_24_ViewScale_NavigationHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "SongProofWP8.Pages.ViewScale.DefaultViewModel":
                userType = (global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SongProofWP8.Pages.ViewScale");
                xamlMember = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember(this, "DefaultViewModel", "SongProofWP8.Common.ObservableDictionary");
                xamlMember.Getter = get_25_ViewScale_DefaultViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "SongProofWP8.UserControls.SessionSetupControl.NoteAmount":
                userType = (global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SongProofWP8.UserControls.SessionSetupControl");
                xamlMember = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember(this, "NoteAmount", "Int32");
                xamlMember.Getter = get_26_SessionSetupControl_NoteAmount;
                xamlMember.Setter = set_26_SessionSetupControl_NoteAmount;
                break;
            case "SongProofWP8.UserControls.SessionSetupControl.SelectedScaleGroup":
                userType = (global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SongProofWP8.UserControls.SessionSetupControl");
                xamlMember = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember(this, "SelectedScaleGroup", "String");
                xamlMember.Getter = get_27_SessionSetupControl_SelectedScaleGroup;
                xamlMember.Setter = set_27_SessionSetupControl_SelectedScaleGroup;
                break;
            case "SongProofWP8.UserControls.SessionSetupControl.SelectedScale":
                userType = (global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SongProofWP8.UserControls.SessionSetupControl");
                xamlMember = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember(this, "SelectedScale", "Object");
                xamlMember.Getter = get_28_SessionSetupControl_SelectedScale;
                xamlMember.Setter = set_28_SessionSetupControl_SelectedScale;
                break;
            case "SongProofWP8.UserControls.SessionSetupControl.SelectedKey":
                userType = (global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SongProofWP8.UserControls.SessionSetupControl");
                xamlMember = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember(this, "SelectedKey", "String");
                xamlMember.Getter = get_29_SessionSetupControl_SelectedKey;
                xamlMember.Setter = set_29_SessionSetupControl_SelectedKey;
                break;
            case "SongProofWP8.UserControls.SessionSetupControl.SelectedDifficulty":
                userType = (global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SongProofWP8.UserControls.SessionSetupControl");
                xamlMember = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember(this, "SelectedDifficulty", "SongProofWP8.ScaleResources.Difficulties");
                xamlMember.Getter = get_30_SessionSetupControl_SelectedDifficulty;
                xamlMember.Setter = set_30_SessionSetupControl_SelectedDifficulty;
                break;
            case "SongProofWP8.UserControls.SessionSetupControl.ShowSharp":
                userType = (global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SongProofWP8.UserControls.SessionSetupControl");
                xamlMember = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember(this, "ShowSharp", "Boolean");
                xamlMember.Getter = get_31_SessionSetupControl_ShowSharp;
                xamlMember.Setter = set_31_SessionSetupControl_ShowSharp;
                break;
            case "SongProofWP8.UserControls.TitleBarControl.TextValue":
                userType = (global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SongProofWP8.UserControls.TitleBarControl");
                xamlMember = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember(this, "TextValue", "String");
                xamlMember.Getter = get_32_TitleBarControl_TextValue;
                xamlMember.Setter = set_32_TitleBarControl_TextValue;
                break;
            case "SongProofWP8.UserControls.TitleBarControl.FontSizeValue":
                userType = (global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("SongProofWP8.UserControls.TitleBarControl");
                xamlMember = new global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlMember(this, "FontSizeValue", "Double");
                xamlMember.Getter = get_33_TitleBarControl_FontSizeValue;
                xamlMember.Setter = set_33_TitleBarControl_FontSizeValue;
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlSystemBaseType
    {
        global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::SongProofWP8.SongProofWP8_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


